617 command 
endet bei 2600

 case 'setlevel':
                if isAdmins
                let who = whouser
if (!who) throw '*Markieren sie jemand*'
let teeext = text.replace('@' + who.split`@`[0], '').trim()
if (!teeext) throw '*Geben sie eine Anzahl die sie hinzuh√ºgen wollen*'
if (isNaN(teeext)) throw '*nur zahlen*'
if (exp < 1) throw '*Nur zahlen*'
            let hrs = parseInt(teeext)
console.log(hrs)
            db.data.users[who].level += hrs

console.log(user.level)
db.write()
                console.log("Das Level wurde gesetzt.");
                break;


                await Maria.sendMessage(m.chat,{text:`Das Level von ${mentionedUser} ist auf ${userLevel}` , mentions: [whouser] });











                case 'setlevel':
    // Check if the user is an admin
    if (!isAdmins) {
        throw 'Nur Administratoren k√∂nnen den Befehl ausf√ºhren.';
    }

    // Check if a user is mentioned
    if (!whouser) {
        throw 'Markieren Sie jemanden, dessen Level gesetzt werden soll.';
    }

    // Extract the level from the message
    const levelToAdd = parseInt(text.replace('@' + whouser.split('@')[0], '').trim());

    // Validate the level input
    if (isNaN(levelToAdd) || levelToAdd <= 0) {
        throw 'Ung√ºltige Anzahl f√ºr das Hinzuf√ºgen von Level.';
    }

    // Update the user's level in the database
    if (!db.data.users[whouser]) {
        throw 'Der angegebene Benutzer existiert nicht in der Datenbank.';
    }

    db.data.users[whouser].level += levelToAdd;
    db.write();
    
    console.log('Das Level wurde erfolgreich gesetzt.');
    break;






    // Befehl zum Setzen des Levels
async function start(client, message, Maria, store) {
    const args = message.body.split(' ');
    if (args.length === 3 && args[0] === '/setlevel') {
        const user = args[1];
        const level = parseInt(args[2]);
        if (!isNaN(level)) {
            try {
                let database = loadDatabase();
                database[user] = { level: level, xp: 0 };
                saveDatabase(database);
                await client.sendText(message.from, `Das Level von ${user} wurde auf ${level} gesetzt.`);
            } catch (error) {
                console.error("Fehler beim Setzen des Levels:", error);
                await client.sendText(message.from, 'Ein Fehler ist aufgetreten.');
            }
        } else {
            await client.sendText(message.from, 'Ung√ºltiges Level.');
        }
    }
}





/////////////

 case "support":
     
        let tex = `Vielen Dank f√ºr deine Anfrage, ein Supporter wird sich so schnell wie m√∂glich bei dir melden. Hier ist der Link zur Supportgruppe:

https://chat.whatsapp.com/KSM8yCpBHGUGkb2f3zfGz7`

await Maria.sendMessage(m.chat, { text: `${tex}` });

let teks = `‚îÄ‚îÄ „Äå Hallo Team „Äç ‚îÄ‚îÄ\n\n*Eine Anfrage von* üìù :\n *ID*: ${id} \n*User*: Wa.me/${m.sender} \n*Nachricht*: ${text} \n`;

        await Maria.sendMessage("120363198299068646@g.us",{ text: teks, gifPlayback: true }, { quoted: m });
        break


        e)v4HgW-8hL7-Vs66O




zeile 481
        console.log(db.data.users)
        this.msgqueque = this.msgqueque || []
        // console.log(chatUpdate)//
        if (!chatUpdate) return
        if (chatUpdate.messages.length > 1) console.log(chatUpdate.messages)
        let mr = chatUpdate.messages[chatUpdate.messages.length - 1]
        


        
case 'setlevel':
    
  

    // Check if a user is mentioned
    if (!whouser) {
        throw 'Markieren Sie jemanden, dessen Level gesetzt werden soll.';
    }

    // Extract the level from the message
    const levelToAdd = parseInt(text.replace('@' + whouser.split('@')[0], '').trim());

    // Validate the level input
    if (isNaN(levelToAdd) || levelToAdd <= 0) {
        throw 'Ung√ºltige Anzahl f√ºr das Hinzuf√ºgen von Level.';
    }

    // Update the user's level in the database
    if (!db.data.users[whouser]) {
        throw 'Der angegebene Benutzer existiert nicht in der Datenbank.';
    }

    db.data.users[whouser].level += levelToAdd;
    db.write();
    throw 'Level erfolgreich hinzugef√ºgt.';
    console.log('Das Level wurde erfolgreich gesetzt.');
    break;


////////


async function startMaria() {
//------------------------------------------------------
let { version, isLatest } = await fetchLatestBaileysVersion()
const {  state,saveCreds } =await useMultiFileAuthState(`./session`)
    const msgRetryCounterCache = new NodeCache() // for retry message, "waiting message"
    const Maria = makeWASocket({
        logger: pino({ level: 'silent' }),
        printQRInTerminal: true, // popping up QR in terminal log
      mobile: useMobile, // mobile api (prone to bans)
      browser: ['Chrome (Linux)', '', ''], // for this issues https://github.com/WhiskeySockets/Baileys/issues/328
     auth: {
         creds: state.creds,
         keys: makeCacheableSignalKeyStore(state.keys, Pino({ level: "fatal" }).child({ level: "fatal" })),
      },
      browser: ['Chrome (Linux)', '', ''], // for this issues https://github.com/WhiskeySockets/Baileys/issues/328
      markOnlineOnConnect: true, // set false for offline
      generateHighQualityLinkPreview: true, // make high preview link
      getMessage: async (key) => {
         let jid = jidNormalizedUser(key.remoteJid)
         let msg = await store.loadMessage(jid, key.id)

         return msg?.message || ""
      },
      msgRetryCounterCache, // Resolve waiting messages
      defaultQueryTimeoutMs: undefined, // for this issues https://github.com/WhiskeySockets/Baileys/issues/276
   })
   
   store.bind(Maria.ev)
    Maria.ev.on('messages.upsert', async chatUpdate => {
        //console.log(JSON.stringify(chatUpdate, undefined, 2))
        try {
            const mek = chatUpdate.messages[0]
            if (!mek.message) return
            mek.message = (Object.keys(mek.message)[0] === 'ephemeralMessage') ? mek.message.ephemeralMessage.message : mek.message
            if (mek.key && mek.key.remoteJid === 'status@broadcast'){
            if (autoread_status) {
            await Maria.readMessages([mek.key]) 
            }
            } 
            if (!Maria.public && !mek.key.fromMe && chatUpdate.type === 'notify') return
            if (mek.key.id.startsWith('BAE5') && mek.key.id.length === 16) return
            const m = smsg(Maria, mek, store)
            require("./Heart")(Maria, m, chatUpdate, store)
        } catch (err) {
            console.log(err)
        }
    })

   Maria.sendContact = async (jid, kon, quoted = '', opts = {}) => {
	let list = []
	for (let i of kon) {
	    list.push({
	    	displayName: await Maria.getName(i + '@s.whatsapp.net'),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await Maria.getName(i + '@s.whatsapp.net')}\nFN:${await Maria.getName(i + '@s.whatsapp.net')}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Ponsel\nitem2.EMAIL;type=INTERNET:empty\nitem2.X-ABLabel:Email\nitem3.URL:https://instagram.com/Lion-Bot\nitem3.X-ABLabel:Instagram\nitem4.ADR:;;Germany;;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}
	Maria.sendMessage(jid, { contacts: { displayName: global.ownername, contacts: list }, ...opts }, { quoted })
    }
    
    Maria.decodeJid = (jid) => {
        if (!jid) return jid
        if (/:\d+@/gi.test(jid)) {
            let decode = jidDecode(jid) || {}
            return decode.user && decode.server && decode.user + '@' + decode.server || jid
        } else return jid
    }

    Maria.ev.on('contacts.update', update => {
        for (let contact of update) {
            let id = Maria.decodeJid(contact.id)
            if (store && store.contacts) store.contacts[id] = {
                id,
                name: contact.notify
            }
        }
    })

    Maria.getName = (jid, withoutContact = false) => {
        id = Maria.decodeJid(jid)
        withoutContact = Maria.withoutContact || withoutContact
        let v
        if (id.endsWith("@g.us")) return new Promise(async (resolve) => {
            v = store.contacts[id] || {}
            if (!(v.name || v.subject)) v = Maria.groupMetadata(id) || {}
            resolve(v.name || v.subject || PhoneNumber('+' + id.replace('@s.whatsapp.net', '')).getNumber('international'))
        })
        else v = id === '0@s.whatsapp.net' ? {
                id,
                name: 'WhatsApp'
            } : id === Maria.decodeJid(Maria.user.id) ?
            Maria.user :
            (store.contacts[id] || {})
        return (withoutContact ? '' : v.name) || v.subject || v.verifiedName || PhoneNumber('+' + jid.replace('@s.whatsapp.net', '')).getNumber('international')
    }
    
    Maria.public = true

    Maria.serializeM = (m) => smsg(Maria, m, store)




///////////

    // login use pairing code
   // source code https://github.com/WhiskeySockets/Baileys/blob/master/Example/example.ts#L61
   if (pairingCode && !Maria.authState.creds.registered) {
    if (useMobile) throw new Error('Cannot use pairing code with mobile api')

    let phoneNumber
    if (!!phoneNumber) {
       phoneNumber = phoneNumber.replace(/[^0-9]/g, '')

       if (!Object.keys(PHONENUMBER_MCC).some(v => phoneNumber.startsWith(v))) {
          console.log(chalk.bgBlack(chalk.redBright("Start with country code of your WhatsApp Number, Example : +255699722149")))
          process.exit(0)
       }
    } else {
       phoneNumber = await question(chalk.bgBlack(chalk.greenBright(`Please type your WhatsApp number üòç\nFor example: +255699722149 : `)))
       phoneNumber = phoneNumber.replace(/[^0-9]/g, '')

       // Ask again when entering the wrong number
       if (!Object.keys(PHONENUMBER_MCC).some(v => phoneNumber.startsWith(v))) {
          console.log(chalk.bgBlack(chalk.redBright("Start with country code of your WhatsApp Number, Example : +255699722149")))

          phoneNumber = await question(chalk.bgBlack(chalk.greenBright(`Please type your WhatsApp number üòç\nFor example: +255699722149 : `)))
          phoneNumber = phoneNumber.replace(/[^0-9]/g, '')
          rl.close()
       }
    }

    setTimeout(async () => {
       let code = await Maria.requestPairingCode(phoneNumber)
       code = code?.match(/.{1,4}/g)?.join("-") || code
       console.log(chalk.black(chalk.bgGreen(`Your Pairing Code : `)), chalk.black(chalk.white(code)))
    }, 3000)
 }